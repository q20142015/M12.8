<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="db829a83-994d-4d9b-8874-06b9b06011cd" name="Changes" comment="2. Создайте два метода, возвращающие список указанной длины (count). Они должны содержать сотрудников, отсортированных по убыванию и возрастанию заработной платы:&#10;&#10;List&lt;Employee&gt; getTopSalaryStaff(int count),&#10;List&lt;Employee&gt; getLowestSalaryStaff(int count).">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2NsTm40wVpOfZWLDZtNpcQ4Gq86" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;
  }
}</component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="db829a83-994d-4d9b-8874-06b9b06011cd" name="Changes" comment="" />
      <created>1680451947435</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1680451947435</updated>
    </task>
    <task id="LOCAL-00001" summary="Выполните задание в репозитории java_basics в проекте AbstractClasses/practice_1. Директория пустая, вам необходимо в ней создать новый проект и выполнить задание.&#10;&#10;1. Создайте класс компании Company, содержащей сотрудников и реализующей методы:&#10;&#10;найм одного сотрудника — hire(Employee employee),&#10;найм списка сотрудников – hireAll(Collection&lt;Employee&gt; employes),&#10;увольнение сотрудника – fire(Employee employee),&#10;получение значения дохода компании – getIncome().&#10;Каждый метод НЕ должен иметь модификатор static, это позволит каждому объекту класса Company иметь свой набора сотрудников, свой расчет дохода, увольнение и найм. Аргументы и возвращаемое значение методов выберите на основании логики работы вашего приложения.&#10;&#10;&#10;2. Создайте два метода, возвращающие список указанной длины (count). Они должны содержать сотрудников, отсортированных по убыванию и возрастанию заработной платы:&#10;&#10;List&lt;Employee&gt; getTopSalaryStaff(int count),&#10;List&lt;Employee&gt; getLowestSalaryStaff(int count).&#10;&#10;3. Создайте классы сотрудников с информацией о зарплатах и условиями начисления зарплаты:&#10;&#10;Manager — зарплата складывается из фиксированной части и бонуса в виде 5% от заработанных для компании денег. Количество заработанных денег для компании генерируйте случайным образом от 115 000 до 140 000 рублей.&#10;TopManager — зарплата складывается из фиксированной части и бонуса в виде 150% от заработной платы, если доход компании более 10 млн рублей.&#10;Operator — зарплата складывается только из фиксированной части.&#10;Каждый класс сотрудника должен имплементировать интерфейс Employee. В интерфейсе Employee должен быть объявлен метод, возвращающий зарплату сотрудника, — getMonthSalary().&#10;&#10;Аргументы и возвращаемое значение метода выберите в соответствии с логикой начисления зарплат. В интерфейсе объявите необходимые методы.&#10;Для демонстрации и тестирования работы ваших классов:&#10;&#10;Создайте и наймите в компанию: 180 операторов Operator, 80 менеджеров по продажам Manager, 10 топ-менеджеров TopManager.&#10;Распечатайте список из 10–15 самых высоких зарплат в компании.&#10;Распечатайте список из 30 самых низких зарплат в компании.&#10;Увольте 50% сотрудников.&#10;Распечатайте список из 10–15 самых высоких зарплат в компании.&#10;Распечатайте список из 30 самых низких зарплат в компании.&#10;&#10;&#10;Примеры вывода списка зарплат&#10;&#10;Список из пяти зарплат по убыванию:&#10;&#10;230 000 руб.&#10;178 000 руб.&#10;165 870 руб.&#10;123 000 руб.&#10;117 900 руб.">
      <created>1680459698413</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1680459698413</updated>
    </task>
    <task id="LOCAL-00002" summary="Опечатка">
      <created>1680459938088</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1680459938088</updated>
    </task>
    <task id="LOCAL-00003" summary="2. Создайте два метода, возвращающие список указанной длины (count). Они должны содержать сотрудников, отсортированных по убыванию и возрастанию заработной платы:&#10;&#10;List&lt;Employee&gt; getTopSalaryStaff(int count),&#10;List&lt;Employee&gt; getLowestSalaryStaff(int count).">
      <created>1680467938902</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1680467938902</updated>
    </task>
    <option name="localTasksCounter" value="4" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Выполните задание в репозитории java_basics в проекте AbstractClasses/practice_1. Директория пустая, вам необходимо в ней создать новый проект и выполнить задание.&#10;&#10;1. Создайте класс компании Company, содержащей сотрудников и реализующей методы:&#10;&#10;найм одного сотрудника — hire(Employee employee),&#10;найм списка сотрудников – hireAll(Collection&lt;Employee&gt; employes),&#10;увольнение сотрудника – fire(Employee employee),&#10;получение значения дохода компании – getIncome().&#10;Каждый метод НЕ должен иметь модификатор static, это позволит каждому объекту класса Company иметь свой набора сотрудников, свой расчет дохода, увольнение и найм. Аргументы и возвращаемое значение методов выберите на основании логики работы вашего приложения.&#10;&#10;&#10;2. Создайте два метода, возвращающие список указанной длины (count). Они должны содержать сотрудников, отсортированных по убыванию и возрастанию заработной платы:&#10;&#10;List&lt;Employee&gt; getTopSalaryStaff(int count),&#10;List&lt;Employee&gt; getLowestSalaryStaff(int count).&#10;&#10;3. Создайте классы сотрудников с информацией о зарплатах и условиями начисления зарплаты:&#10;&#10;Manager — зарплата складывается из фиксированной части и бонуса в виде 5% от заработанных для компании денег. Количество заработанных денег для компании генерируйте случайным образом от 115 000 до 140 000 рублей.&#10;TopManager — зарплата складывается из фиксированной части и бонуса в виде 150% от заработной платы, если доход компании более 10 млн рублей.&#10;Operator — зарплата складывается только из фиксированной части.&#10;Каждый класс сотрудника должен имплементировать интерфейс Employee. В интерфейсе Employee должен быть объявлен метод, возвращающий зарплату сотрудника, — getMonthSalary().&#10;&#10;Аргументы и возвращаемое значение метода выберите в соответствии с логикой начисления зарплат. В интерфейсе объявите необходимые методы.&#10;Для демонстрации и тестирования работы ваших классов:&#10;&#10;Создайте и наймите в компанию: 180 операторов Operator, 80 менеджеров по продажам Manager, 10 топ-менеджеров TopManager.&#10;Распечатайте список из 10–15 самых высоких зарплат в компании.&#10;Распечатайте список из 30 самых низких зарплат в компании.&#10;Увольте 50% сотрудников.&#10;Распечатайте список из 10–15 самых высоких зарплат в компании.&#10;Распечатайте список из 30 самых низких зарплат в компании.&#10;&#10;&#10;Примеры вывода списка зарплат&#10;&#10;Список из пяти зарплат по убыванию:&#10;&#10;230 000 руб.&#10;178 000 руб.&#10;165 870 руб.&#10;123 000 руб.&#10;117 900 руб." />
    <MESSAGE value="Опечатка" />
    <MESSAGE value="2. Создайте два метода, возвращающие список указанной длины (count). Они должны содержать сотрудников, отсортированных по убыванию и возрастанию заработной платы:&#10;&#10;List&lt;Employee&gt; getTopSalaryStaff(int count),&#10;List&lt;Employee&gt; getLowestSalaryStaff(int count)." />
    <option name="LAST_COMMIT_MESSAGE" value="2. Создайте два метода, возвращающие список указанной длины (count). Они должны содержать сотрудников, отсортированных по убыванию и возрастанию заработной платы:&#10;&#10;List&lt;Employee&gt; getTopSalaryStaff(int count),&#10;List&lt;Employee&gt; getLowestSalaryStaff(int count)." />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/Main.java</url>
          <line>25</line>
          <option name="timeStamp" value="4" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
    <watches-manager>
      <configuration name="Application">
        <watch expression="((TopManager)Emin.get(0)).monthSalary" custom="TopManager" />
        <watch expression="((TopManager)Emin.get(0)).monthSalary" custom="TopManager" />
      </configuration>
    </watches-manager>
  </component>
</project>